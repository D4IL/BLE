/* I used this code alongside the app Light Blue to establish a bluetooth connection and turn on and off an led to
signify the ability to read and write information to and from a periphial device using an iPhone.
*/

#include <ArduinoBLE.h>

BLEService ledService("19B10000-E8F2-537E-4F6C-D104768A1214"); // BLE LED Service

// BL?E LED Switch Characteristic - custom 128-bit UUID, read and writable by central
BLEByteCharacteristic switchCharacteristic("19B10001-E8F2-537E-4F6C-D104768A1214", BLERead | BLEWrite);

const int ledPin = LED_BUILTIN; // pin LED LIGHT IS TEST CASE INDICATION FOR CONNECTION

void setup() {
  Serial.begin(9600);
  while (!Serial);

  // set LED pin to output mode
  pinMode(ledPin, OUTPUT);

  // begin initialization
  if (!BLE.begin()) {
    Serial.println("BluetoothÂ® Low Energy failed!");

    while (1);
  }

  // set advertised local name and service UUID:
  BLE.setLocalName("REMI");
  BLE.setAdvertisedService(ledService);

  // add the characteristic to the service
  ledService.addCharacteristic(switchCharacteristic);

  // add service
  BLE.addService(ledService);

  // set the initial value for the characeristic:
  switchCharacteristic.writeValue(0);

  // start advertising
  BLE.advertise();

  Serial.println("REMI");
}

void loop() {
  // listen for BLE peripherals to connect:
  BLEDevice central = BLE.central();

  // if a central is connected to peripheral:
  if (central) {
    Serial.print("Connected to IPHONE: "); //THIS IS THE CENTRAL DEVICE CONNECTION ".central()"
    // print the central's MAC address:
    Serial.println(central.address());

    // while the central is still connected to peripheral:
    while (central.connected()) {
      // if the remote device wrote COMMAND
      // use the value to control the LED:
      if (switchCharacteristic.written()) {
        if (switchCharacteristic.value()) {   // any value other than 0
          Serial.println("CONNECTION ESTABISHED");
          digitalWrite(ledPin, HIGH);         // CONNECTED TO IPHONE OR APP **TEST CIRCUIT LED on
        } else {                              // a 0 value
          Serial.println(F("DISCONNECTED"));
          digitalWrite(ledPin, LOW);          //DISCONNECTED TO IPHONE OR APP **TEST CIRCUIT LED off
        }
      }
    }

    // when the central disconnects, print it out:
    Serial.print(F("Disconnected from iPhone: "));  // Disconnected from the central device
    Serial.println(central.address());
  }
}
